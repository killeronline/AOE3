using System;
using System.Collections.Generic;

public class Test
{
	public static Dictionary<int,string> actions = new Dictionary<int,string>();
	public static Dictionary<int,string> targets = new Dictionary<int,string>
	{
		{0,"AGE"},
		{1,"F"}
	};
	
	public static void ProcessEngine()
	{
		if ( b_h > 0 )
		{
			b_h-- ; 
			if ( b_h == 0 )// house built
			{
				vb-- ;
				vi++ ;
				pop += 10 ;
			}
		}
		if ( b_w > 0 )
		{
			b_w-- ; 
			if ( b_w == 0 )// wonder built
			{
				vb-- ;
				vi++ ;
			}
		}
		// Auto Age
		if (  f >= 800 && b_w == -1 )// Only Once
		{
			b_w = 3 ;
			if ( vi > 0 )
			{
				vi-- ;
			}
			else if ( vw > 0 )
			{
				vw-- ;
			}
			else if ( vc > 0 )
			{
				vc-- ;
			}
			else if ( vf > 0 )
			{
				vf-- ;
			}
			vb++ ;
			f -= 800 ;// Colonial Push
		}
		if ( targets.ContainsKey( target ) )
		{
			string targetAction = targets[target];
			bool isAchieved = false ;
			if ( targetAction == "AGE" )
			{
				if (  b_w == 0 )
				{
					isAchieved = true ;
					Console.WriteLine("Wonder Built");
				}
				else
				{	
					vf += vi ;
					vi = 0 ;
				}
			}
			if ( isAchieved )
			{
				target++;
			}
		}
		// Auto Queue
		bool needWood = false ;
		if ( ( vi + vf + vw + vc + vb ) < pop )
		{
			if ( w >= 100 )
			{
				vi++;
				w -= 100 ;	
			}
			else
			{
				needWood = true ;
			}
		}
		else
		{
			if ( w >= 80 )
			{
				b_h = 1 ;
				if ( vi > 0 )
				{
					vi-- ;
				}
				else if ( vw > 0 )
				{
					vw-- ;
				}
				else if ( vc > 0 )
				{
					vc-- ;
				}
				else if ( vf > 0 )
				{
					vf-- ;
				}
				vb++ ;
				w -= 80 ;	
			}
			else
			{
				needWood = true ;
			}
		}
		if ( needWood )
		{
			if ( vi > 0 )
			{
				vi-- ;
				vw++;
			}
			else if ( vf > 0 )
			{
				vf-- ;
				vw++;
			}
			else if ( vc > 0 )
			{
				vc-- ;
				vw++;
			}
			else
			{
				// wait
			}
		}
		
		f += Convert.ToInt32(vf * ( rf / 2 ));
		w += Convert.ToInt32(vw * ( rw / 2 ));
		c += Convert.ToInt32(vc * ( rc / 2 ));
		s++;
	}
	public static void ShowResources()
	{
		Console.WriteLine(String.Format("\t{0}\t{1}\t{2}\t({3}/{4})",f<1000?"0"+f:""+f,w,c,( vi + vf + vw + vc + vb ),pop));
	}
	public static void Main()
	{
		for ( int t = 30 ; t < 1800 ; t += 30 )
		{
			if ( t%60 == 0 )
			{
				Console.Write( "At "+ (t/60) + ":00 = " );
			}
			else
			{
				Console.Write( "At "+ (t/60) + ":30 = " );
			}
			ShowResources();
			ProcessEngine();
		}
	}
	public static int min( int a , int b )
	{
		return a > b ? b : a ;
	}
	public static int max( int a , int b )
	{
		return a > b ? a : b ;
	}
	//{
	public static int s = 1 ;
	public static int f = 300 ;
	public static int w = 300 ;
	public static int c = 100 ;
	public static double rf = 50 ;
	public static double rw = 40 ;
	public static double rc = 30 ;
	public static int vi = 6 ;
	public static int vf = 0 ;
	public static int vw = 0 ;
	public static int vc = 0 ;
	public static int vb = 0 ;
	public static int pop = 10 ;
	public static int b_w = -1 ;
	public static int b_h = 0 ;
	public static int target = 0 ;
	//}
}
